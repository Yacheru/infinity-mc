name: "infinity-mc"

services:
  traefik:
    user: root
    container_name: traefik
    image: traefik:v3.0
    ports:
      - "80:80"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./configs/traefik/dev/traefik.yml:/traefik.yml:ro
      - ./configs/traefik/dev/host.yml:/host.yml:ro
      - ./configs/traefik/dev/logs:/var/log/traefik
#      - ./configs/traefik/dev/acme.json:/acme.json
#    environment:
#      REGRU_USERNAME: ${REGRU_USERNAME}
#      REGRU_PASSWORD: ${REGRU_PASSWORD}
    depends_on:
      - frontend
    networks:
      - traefik

  frontend:
    user: root
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - traefik

#  auth-service:
#    user: root
#    container_name: auth-service
#    ports:
#      - 8989
#    build:
#      context: ./api/jwt-auth-service
#      dockerfile: ./deploy/Dockerfile
#    depends_on:
#      mongodb:
#        condition: service_started
#      postgres:
#        condition: service_healthy
#      redis:
#        condition: service_started
#    networks:
#      - traefik
#
#  payments-service:
#    user: root
#    container_name: payments-service
#    ports:
#      - 81:81
#    build:
#      context: ./api/payments-service
#      dockerfile: ./deploy/Dockerfile
#    depends_on:
#      - kafka-1
#    networks:
#      - traefik
#
#  punishments-service:
#    container_name: punishments-service
#    user: root
#    ports:
#      - 82:82
#    build:
#      context: ./api/punishments-service
#      dockerfile: ./deploy/Dockerfile
#    depends_on:
#      mysql:
#        condition: service_started
#    networks:
#      - traefik
#
#  news-service:
#    user: root
#    container_name: news-service
#    ports:
#      - 83:83
#    build:
#      context: ./api/news-service
#      dockerfile: ./deploy/Dockerfile
#    depends_on:
#      redis:
#        condition: service_started
#      postgres:
#        condition: service_healthy
#      elasticsearch:
#        condition: service_started
#    networks:
#      - traefik
#
#  websocket-chat-service:
#    container_name: websocket-chat-service
#    user: root
#    build:
#      context: ./api/websocket-chat-service
#      dockerfile: ./deploy/Dockerfile
#    depends_on:
#      redis:
#        condition: service_started
#      scylladb:
#        condition: service_started
#
#  notifications-service:
#    container_name: notification-service
#    user: root
#    build:
#      context: ./api/notifications-service
#      dockerfile: ./deploy/Dockerfile
#    depends_on:
#      - kafka-1
#
#  deliver-service:
#    container_name: deliver-service
#    user: root
#    build:
#      context: ./api/deliver-service
#      dockerfile: ./deploy/Dockerfile
#    depends_on:
#      - kafka-1

  # deliver-service
  # payments-service
  zookeeper:
    user: root
    image: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - traefik

  # deliver-service
  # payments-service
  kafka-1:
    user: root
    image: wurstmeister/kafka
    ports:
      - "9095:9094"
    expose:
      - 9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://kafka-1:9092,OUTSIDE://kafka-1:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:9092,OUTSIDE://localhost:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT

      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_BROKER_ID: 500
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configs/kafka-data/500:/kafka
    depends_on:
      - zookeeper
    networks:
      - traefik

  # websocket-chat-service
  scylladb:
    user: root
    container_name: scylladb
    image: bitnami/scylladb:6.0
    ports:
      - 9042:9042
    volumes:
      - ./configs/scylladb:/bitnami
    environment:
      SCYLLADB_HOST: ${SCYLLADB_HOST:?error}
      SCYLLADB_USER: ${SCYLLADB_USER:?error}
      SCYLLADB_PASSWORD: ${SCYLLADB_PASSWORD:?error}
    networks:
      - traefik

  # news-service
  # websocket-chat-service
  redis:
    user: root
    image: bitnami/redis:7.4.0
    container_name: redis
    ports:
      - 6379:6379
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:?error}
    volumes:
      - ./configs/redis-data:/bitnami/redis/data
    networks:
      - traefik

  # punishments-service
  mysql:
    user: root
    container_name: mysql
    image: mysql:8.0
    ports:
      - 3306:3306
    environment:
      MYSQL_USER: ${MYSQL_USER:?error}
      MYSQL_DATABASE: ${MYSQL_DATABASE:?error}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:?error}
      MYSQL_ROOT_PASSWORD: string
    volumes:
      - ./configs/mysql:/var/lib/mysql
    networks:
      - traefik

  # news-service
  postgres:
    user: root
    image: bitnami/postgresql:16
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE:?error}
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME:?error}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD:?error}
      POSTGRESQL_POSTGRES_PASSWORD: ${POSTGRESQL_POSTGRES_PASSWORD:?error}
    volumes:
      - ./configs/postgres/data:/bitnami/postgresql
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRESQL_USERNAME} -d ${POSTGRESQL_DATABASE}'" ]
      interval: 30s
      timeout: 60s
      retries: 5
    networks:
      - traefik

  mongodb:
    user: root
    image: bitnami/mongodb:8.0
    container_name: mongodb
    ports:
      - 27017:27017
    environment:
      MONGODB_USERNAME: ${MONGODB_USERNAME:?error}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD:?error}
      MONGODB_DATABASE: ${MONGODB_DATABASE:?error}
      MONGODB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD:?error}
    volumes:
      - ./configs/mongodb:/bitnami/mongodb

  kibana:
    container_name: kibana
    user: root
    image: bitnami/kibana:8.16.1
    ports:
      - 5601:5601
    environment:
      KIBANA_ELASTICSEARCH_URL: ${KIBANA_ELASTICSEARCH_URL:?error}
      KIBANA_PASSWORD: ${KIBANA_PASSWORD:?error}
    volumes:
      - ./configs/kibana/kibana-data:/bitnami/kibana
    depends_on:
      - elasticsearch

  # news-service
  elasticsearch:
    user: root
    image: bitnami/elasticsearch:8.15.0
    container_name: elasticsearch
    ports:
      - 9200:9200
    environment:
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD:?error}
    volumes:
      - ./configs/elasticsearch/elastic-data:/bitnami/elasticsearch
    networks:
      - traefik

  # news-service
  logstash:
    user: root
    image: bitnami/logstash:8.7.0
    container_name: logstash
    ports:
      - 9600:9600
    environment:
      LOGSTASH_ELASTICSEARCH_HOST: ${ELASTICSEARCH_CLIENT:?error}
      LOGSTASH_PIPELINE_CONF_FILENAME: sync.conf
    depends_on:
      - elasticsearch
      - postgres
    volumes:
      - ./configs/logstash/data:/bitnami/logstash/data
      - ./configs/logstash/config:/bitnami/logstash/pipeline
      - ./configs/logstash/bin/postgres.jar:/opt/bitnami/logstash/logstash-core/lib/jars/postgres.jar
    networks:
      - traefik

networks:
  traefik:
    name: traefik-network
    driver: bridge